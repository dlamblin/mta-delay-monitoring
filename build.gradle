import com.sun.org.apache.xalan.internal.xsltc.cmdline.Compile

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.7.0'
        classpath 'org.hidetake:gradle-ssh-plugin:1.1.3'
    }
}

group 'lamblin'
version '0.1-SNAPSHOT'

apply plugin: 'application'
apply plugin: "com.google.protobuf"

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
    compile group: 'com.google.guava', name: 'guava', version: '18.0'
    compile group: 'com.google.protobuf', name: 'protobuf-java-util', version: '3.0.0-beta-1'
    compile group: 'com.google.transit', name: 'gtfs-realtime-bindings', version: '0.0.4'
    compile group: 'com.offbytwo', name: 'docopt', version: '0.6.0.20150202'
    //compile group: 'org.apache.kafka', name: 'kafka_2.9.1', version: '0.8.2.1' {
    compile ('org.apache.kafka:kafka_2.9.1:0.8.2.1') {
        exclude group: 'com.sun.jmx', module: 'jmxri'
        exclude group: 'javax.jmx', module: 'jms'
        exclude group: 'com.sun.jdmk', module: 'jmxtools'
    }
}

protobuf {
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                python { }
            }
        }
    }
    protoc {
        //  artifact = 'com.google.protobuf:protoc:3.0.0-alpha-3'
        artifact = 'com.google.protobuf:protoc:2.6.1'
    }
}

// First Application Script
mainClassName = "com.insight.lamblin.GtfsToJson"
applicationName = "gtfsToJson"

// Subsequent Scripts
task createAllStartScripts() << {
    // This task is added to by a loop over the scripts array creating-sub tasks
}
def scripts = [ 'gtfsToJson': 'com.insight.lamblin.GtfsToJson',
                'rawGtfsKafkaProducer': 'com.insight.lamblin.RawGtfsKafkaProducer'
]
scripts.each() { scriptName, className ->
    def t = tasks.create(name: scriptName+'StartScript', type: CreateStartScripts) {
        mainClassName = className
        applicationName = scriptName
        outputDir = new File(project.buildDir, 'scripts')
        classpath = jar.outputs.files + project.configurations.runtime
    }
    applicationDistribution.into("bin") {
        from(t)
        fileMode = 0755
    }
    createAllStartScripts.dependsOn(t)
}


if (new File('ssh.gradle').exists()) {
    apply from: 'ssh.gradle'
}

def jre7paths = [new File(System.getenv('JAVA_HOME') + '/../jre7'),
                 new File(System.getenv('JAVA_HOME') + '/../jdk1.7*/jre')]
jre7paths.each() { file ->
    if (file.exists()) {
        // Eliminates bootstrap class warning from javac
        tasks.withType(AbstractCompile, { AbstractCompile ac ->
            ac.options.bootClasspath = file.getPath() + "/lib/rt.jar"
        })
    }
}
